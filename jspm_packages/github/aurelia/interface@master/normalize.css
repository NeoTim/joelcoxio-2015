@charset "UTF-8";
html {
  box-sizing: border-box; }

*,
*::after,
*::before {
  box-sizing: inherit; }

html {
  box-sizing: border-box; }

*,
*::after,
*::before {
  box-sizing: inherit; }

/******************************
 *
 * Aurelia Interface
 *
 * author  JoelCoxOKC  <Joel.cox.dev@gmail.com>
 *
 ******************************/
/******************************
 * sass THEME - MATREIAL
 ******************************/
/**
 *  @register:
 *
 *      _classes
 *      _functions
 *      _palette
 *      _placeholders
 */
/**
 * Retrieves a color value from the $material-colors Sass map
 * Inspired by https://github.com/nilskaspersson/Google-Material-UI-Color-Palette/
 *
 * @function
 * @param {string} color-name             - quoted, lower-case, dasherized color
 *                                          name (e.g. 'pink', 'amber')
 * @param {string} [color-variant='500']  - quoted, lowercase color variant (e.g.
 *                                          '200', 'a100')
 */
/*********************
    Typography
*********************/
/**
 * Retrieves a color value from the $material-colors Sass map
 * Inspired by https://github.com/nilskaspersson/Google-Material-UI-Color-Palette/
 *
 * @function
 * @param {string} color-name             - quoted, lower-case, dasherized color
 *                                          name (e.g. 'pink', 'amber')
 * @param {string} [color-variant='500']  - quoted, lowercase color variant (e.g.
 *                                          '200', 'a100')
 */
/**
 * load-module description]
 * @param  {[type]} $name        [description]
 * @param  {[type]} $meta:()     [description]
 * @param  {[type]} $force:false [description]
 * @param  {[type]} $insert:true [description]
 * @return {[type]}              [description]
 */
/**
 * insert-module description]
 * @param  {[type]} $name       [description]
 * @param  {[type]} $meta:false [description]
 * @return {[type]}             [description]
 */
/**
 *
 * loader-import
 * ==============
 *
 * @param  {String} $name Module name to be imported
 * @expose {Placeholer}   Expose module's placeholder on the current context
 */
/**
 *
 * loader-export
 * =============
 *
 * @param  {String} $module Module Defenition Type. {component|mixin|function|theme}
 * @param  {String} $name   Actual Module name
 * @param  {Map}    $map    Module mappings
 * @expose {Placeholder}    Expose the module placeholder.
 */
/**
 * loader-export-component
 *
 * Make sure we don't load styles more than once on each component.
 * @param  {String} $name - component name
 */
/**
 * loader-export-module
 *
 * Make sure we don't load modules more than once.
 *
 * @param  {String} $name - component name
 */
/**
 *
 * loader-is--loaded
 * =================
 *
 * @description  Has the file been loaded yet? Should it reload?
 *
 * @param  {Map}     $map [arguments map]
 * @return {Map}     return loaded map instance
 */
/**
 *
 * loader-get--loaded
 * =================
 *
 * @description  Has the file been loaded yet? Should it reload?
 *
 * @param  {Map}     $map [arguments map]
 * @return {Map}     return loaded map instance
 */
/**
 *
 * Extend mixin
 *
 * Dealing with the extension for you
 *
 * @param  {String} $placeholder  - name of the placeholder to @extend
 * @param  {Bool} $extend: (true) - @extend or @include?
 */
/*** Colors ***/
/* SHADOWS */
/* Animation Curves */
/* Buttons */
/***********
 * Font Paths
 **********/
/***********
 * Font Heading
 **********/
/***********
 * Grid
 * @columns: Set the number of columns
 * @gutter-width: Set the width of the gutters.
 *
 * @breakpoint [xs] Extra small screen / phone
 * @breakpoint [sm] Small screen / phone
 * @breakpoint [md] Medium screen / tablet
 * @breakpoint [lg] Large screen / desktop
 * @breakpoint [xl] Extra large screen / wide desktop
 **********/
/***********
 * Shadow
 ***********/
/***********
 * Theme Variable
 **********/
/**
 * heading
 * @param  {Number} $size:1 h1, h2, h3, h4, h5, h6
 * @return {EM}      return the heading fontSize
 */
/* SHADOWS */
/**
 * heading
 *
 * Applies font-size and margins
 * @param  {Number} $size:1  Heading size
 * @param  {Boolean} $margin:true  Toggle margins
 */
/**
 *     Utilities
 *   -------------
 *   TODO: Fill out breakpoints
 */
/**
 * map-fetch
 * @param  {Map} $map     Map to iterate through
 * @param  {Strings} $keys... List of strings to fetch from
 */
/**
 *     Mixins
 *   ----------
 */
/*
// At root level
.a {
  @include _(clear); // Same as @extend %clear
}

.b {
  @include _(clear);
}

// In a nested media query
.c {
  @include breakpoint(medium) {
    @include _(clear);
  }
}

// In an outer media query
@include breakpoint(medium) {
  .d {
    @include _(clear);
  }
}

// Both in a nested media query and at root level
.e {
  @include _(clear);

  @include breakpoint(large) {
    @include _(clear);
  }
}

// Have a look at the CSS output on the right.
*/
/* ----------------------------------------------------------------------
 * @Mixin(): flexbox
 * @Placeholder: %flexbox
 *
 * @description applies proper vender prefixes for older browsers when using `display:flex`;
 */
/* ----------------------------------------------------------------------
 * @Mixin(): inline-flex
 * @Placeholder: %inline-flex
 *
 * @description applies proper vender prefixes for older browsers when using `display:inline-flex`;
 */
/* ----------------------------------------------------------------------
 * @Mixin(): flex-direction
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-direction-property
 * @Helper-Mixin(): flex-dir
 * @Helper-Mixin(): flex-column
 * @Helper-Mixin(): flex-row
 * @Placeholder: %flex-column
 * @Placeholder: %flex-row
 *
 * @description The 'flex-direction' property specifies how flex items are placed in
 *              the flex container, by setting the direction of the flex container's
 *              main axis. This determines the direction that flex items are laid out in.
 *
 * @values: row | row-reverse | column | column-reverse
 * @default: row
 */
/* ----------------------------------------------------------------------
 * @Mixin(): flex-wrap
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-wrap-property
 * @description: The 'flex-wrap' property controls whether the flex container is single-line
 *               or multi-line, and the direction of the cross-axis, which determines
 *               the direction new lines are stacked in.
 * @param  {String} [$value: nowrap]
 *
 * @values: nowrap | wrap | wrap-reverse
 * @default: nowrap
 */
/* ----------------------------------------------------------------------
 * @Mixin(): flex-flow
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-flow-property
 * @description: The 'flex-flow' property is a shorthand for setting the 'flex-direction'
 *               and 'flex-wrap' properties, which together define the flex container's
 *               main and cross axes.
 * @values: <flex-direction> | <flex-wrap>
 * @default: row nowrap
 */
/* ----------------------------------------------------------------------
 * @Mixin(): order
 *
 * @resource: http://w3.org/tr/css3-flexbox/#order-property
 * @description: The 'order' property controls the order in which flex items appear within
 *               their flex container, by assigning them to ordinal groups.
 * @default: 0
 */
/* ----------------------------------------------------------------------
 * @Mixin(): flex-grow
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-grow-property
 * @description: The 'flex-grow' property sets the flex grow factor. Negative numbers
 *               are invalid.
 * @default: 0
 */
/* ----------------------------------------------------------------------
 * @Mixin(): flex-shrink
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-shrink-property
 * @description: The 'flex-shrink' property sets the flex shrink factor. Negative numbers
 *               are invalid.
 * @default: 1
 */
/* ----------------------------------------------------------------------
 * @Mixin(): flex-basis
 *
 * @resource: http://www.w3.org/TR/css3-flexbox/#flex-basis-property
 * @description: The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
 *
 * @values: Like "width"
 * @default: auto
 */
/* ----------------------------------------------------------------------
 * @Mixin(): flex
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-property
 * @description: The 'flex' property specifies the components of a flexible length: the
 *               flex grow factor and flex shrink factor, and the flex basis. When an
 *               element is a flex item, 'flex' is consulted instead of the main size
 *               property to determine the main size of the element. If an element is
 *               not a flex item, 'flex' has no effect.
 * @values: none | <flex-grow> <flex-shrink> || <flex-basis>
 * @default: See individual properties (1 1 0).
 */
/* ---------------------------------------------------------------------
 * @Mixin(): justify-content
 * @Helper-Mixin(): flex-just
 *
 * @resource: http://w3.org/tr/css3-flexbox/#justify-content-property
 * @description: The 'justify-content' property aligns flex items along the main axis
 *               of the current line of the flex container. This is done after any flexible
 *               lengths and any auto margins have been resolved. Typically it helps distribute
 *               extra free space leftover when either all the flex items on a line are
 *               inflexible, or are flexible but have reached their maximum size. It also
 *               exerts some control over the alignment of items when they overflow the line.
 *
 * @Note: 'space-*' values not supported in older syntaxes.
 * @values: flex-start | flex-end | center | space-between | space-around
 * @default: flex-start
 */
/* ---------------------------------------------------------------------
 * @Mixin(): align-items
 * @Helper-Mixin(): flex-items
 *
 * @resource: http://w3.org/tr/css3-flexbox/#align-items-property
 * @description: Flex items can be aligned in the cross axis of the current line of the
 *               flex container, similar to 'justify-content' but in the perpendicular
 *               direction. 'align-items' sets the default alignment for all of the flex
 *               container's items, including anonymous flex items. 'align-self' allows
 *               this default alignment to be overridden for individual flex items. (For
 *               anonymous flex items, 'align-self' always matches the value of 'align-items'
 *               on their associated flex container.)
 *
 * @values: flex-start | flex-end | center | baseline | stretch
 * @default: stretch
 */
/* ---------------------------------------------------------------------
 * @Mixin(): align-self
 * @Helper-Mixin(): flex-self
 *
 * @values: auto | flex-start | flex-end | center | baseline | stretch
 * @default: auto
 */
/* ---------------------------------------------------------------------
 * @Mixin(): align-content
 * @Helper-Mixin(): flex-content
 *
 * @resource: http://w3.org/tr/css3-flexbox/#align-content-property
 * @description: The 'align-content' property aligns a flex container's lines within the
 *               flex container when there is extra space in the cross-axis, similar to
 *               how 'justify-content' aligns individual items within the main-axis. Note,
 *               this property has no effect when the flexbox has only a single line.
 *
 * @values: flex-start | flex-end | center | space-between | space-around | stretch
 * @default: stretch
 */
/*
 * new-component
 *
 * @param {Map}    $args   - map of customizable property->value pairs
 * @param {String} $module - module to pull property values from
 *
 * @return {Map} updated instance map
 */
/************************************
 *     HANDSET MEDIA
 ***********************************/
/************************************
 *     TABLET MEDIA
 ***********************************/
/**
 * @mixin button-element
 * @uses Function(): button-element;
 * @param  {List} $args...   ArgumentList
 */
/**
 * @mixin list-item
 * @uses Function(): list-item;
 * @param  {List} $props...   ArgumentList
 */
/**
 * @mixin popover-element
 * @uses Function(): popover-element;
 * @param  {List} $props...   ArgumentList
 */
/**
 * @mixin popover-element
 * @uses Function(): popover-element;
 * @param  {List} $props...   ArgumentList
 */
form textarea::-webkit-validation-bubble-message,
form input::-webkit-validation-bubble-message,
form select::-webkit-validation-bubble-message,
form textarea::-webkit-validation-bubble-message {
  display: none; }

.ai-overlay-element.modal-overlay {
  z-index: 4000;
  min-width: 100vw;
  min-height: 100vh;
  display: block;
  position: fixed;
  outline: none;
  top: 0;
  left: 0;
  -webkit-transform-origin: bottom;
      -ms-transform-origin: bottom;
          transform-origin: bottom;
  opacity: 0;
  -webkit-transform: scaleY(0);
  -ms-transform: scaleY(0);
  transform: scaleY(0);
  -webkit-transition-duration: 0.2s;
          transition-duration: 0.2s;
  -webkit-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  background-color: rgba(0, 0, 0, 0.5); }
  .ai-overlay-element.modal-overlay.is-active {
    -webkit-transform: scaleY(1);
    -ms-transform: scaleY(1);
    transform: scaleY(1);
    opacity: 1; }

.ai-overlay-element.popover-overlay {
  z-index: 4000;
  min-width: 100vw;
  min-height: 100vh;
  display: block;
  position: fixed;
  outline: none;
  top: 0;
  left: 0;
  -webkit-transform-origin: center;
      -ms-transform-origin: center;
          transform-origin: center;
  opacity: 0;
  -webkit-transform: scale(0);
  -ms-transform: scale(0);
  transform: scale(0);
  -webkit-transition-duration: 0.2s;
          transition-duration: 0.2s;
  -webkit-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  background-color: rgba(0, 0, 0, 0.5); }
  .browser-safari .ai-overlay-element.popover-overlay {
    background-color: transparent !important;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    -webkit-backdrop-filter: blur(1rem);
    backdrop-filter: blur(1rem); }
  .ai-overlay-element.popover-overlay.is-closing {
    opacity: 0; }
  .ai-overlay-element.popover-overlay.is-active {
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
    opacity: 1; }

@-webkit-keyframes fadeIn {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }

@keyframes fadeIn {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }

/*!
  Android-style icons originally built by Google’s
  Material Design Icons: https://github.com/google/material-design-icons
  used under CC BY http://creativecommons.org/licenses/by/4.0/
  Modified icons to fit ionicon’s grid from original.
*/
@font-face {
  font-family: "Roboto";
  src: url("assets/font/roboto/Roboto-Thin.woff2") format("woff2"), url("assets/font/roboto/Roboto-Thin.woff") format("woff"), url("assets/font/roboto/Roboto-Thin.ttf") format("truetype");
  font-weight: 200; }

@font-face {
  font-family: "Roboto";
  src: url("assets/font/roboto/Roboto-Light.woff2") format("woff2"), url("assets/font/roboto/Roboto-Light.woff") format("woff"), url("assets/font/roboto/Roboto-Light.ttf") format("truetype");
  font-weight: 300; }

@font-face {
  font-family: "Roboto";
  src: url("assets/font/roboto/Roboto-Regular.woff2") format("woff2"), url("assets/font/roboto/Roboto-Regular.woff") format("woff"), url("assets/font/roboto/Roboto-Regular.ttf") format("truetype");
  font-weight: 400; }

@font-face {
  font-family: "Roboto";
  src: url("assets/font/roboto/Roboto-Medium.woff2") format("woff2"), url("assets/font/roboto/Roboto-Medium.woff") format("woff"), url("assets/font/roboto/Roboto-Medium.ttf") format("truetype");
  font-weight: 500; }

@font-face {
  font-family: "Roboto";
  src: url("assets/font/roboto/Roboto-Bold.woff2") format("woff2"), url("assets/font/roboto/Roboto-Bold.woff") format("woff"), url("assets/font/roboto/Roboto-Bold.ttf") format("truetype");
  font-weight: 700; }

@font-face {
  font-family: "Noto";
  src: url("assets/font/noto/NotoSerif-Regular.ttf") format("truetype"); }

@font-face {
  font-family: "Arual";
  src: url("assets/font/arual/Arual.ttf") format("truetype"); }

@font-face {
  font-family: 'MDIcons';
  font-style: normal;
  font-weight: 400;
  src: url(assets/font/mdicon/MaterialIcons-Regular.eot);
  /* For IE6-8 */
  src: local("MD Icons"), local("MDIcons-Regular"), url(assets/font/mdicon/MaterialIcons-Regular.woff2) format("woff2"), url(assets/font/mdicon/MaterialIcons-Regular.woff) format("woff"), url(assets/font/mdicon/MaterialIcons-Regular.ttf) format("truetype"); }

@font-face {
  font-family: "aIcons";
  src: url("assets/font/aicon/aicons.eot?v=2.0.0");
  src: url("assets/font/aicon/aicons.eot?v=2.0.0#iefix") format("embedded-opentype"), url("assets/font/aicon/aicons.ttf?v=2.0.0") format("truetype"), url("assets/font/aicon/aicons.woff?v=2.0.0") format("woff"), url("assets/font/aicon/aicons.svg?v=2.0.0#Ionicons") format("svg");
  font-weight: normal;
  font-style: normal; }

/**
 * http://applemusic.tumblr.com/
 */
/** Ultra Light */
@font-face {
  font-family: "San Francisco";
  font-weight: 100;
  src: url("https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-ultralight-webfont.woff2") format("woff2"); }

/** Thin */
@font-face {
  font-family: "San Francisco";
  font-weight: 200;
  src: url("https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-thin-webfont.woff2") format("woff2"); }

/** Medium */
@font-face {
  font-family: "San Francisco";
  font-weight: normal;
  src: url("https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-medium-webfont.woff2") format("woff2"); }

/** Semi Bold */
@font-face {
  font-family: "San Francisco";
  font-weight: 500;
  src: url("https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-semibold-webfont.woff2") format("woff2"); }

/** Bold */
@font-face {
  font-family: "San Francisco";
  font-weight: bold;
  src: url("https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-bold-webfont.woff2") format("woff2"); }

/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-weight: normal;
  font-family: "San Francisco";
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  height: 100vh;
  width: 100vw;
  min-width: 100vw;
  min-height: 100vh;
  max-height: 100vh;
  position: relative;
  overflow: hidden !important; }

/**
 * Remove default margin.
 */
body {
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  font-family: "San Francisco";
  height: 100%;
  width: 100%;
  min-width: 100vw;
  min-height: 100vh;
  max-height: 100vh;
  overflow: hidden !important;
  display: flex;
  position: relative; }

html[platform-ios] body {
  font-family: "San Francisco"; }

html[platform-android] body {
  font-family: "Roboto"; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

ai-article,
ai-aside,
ai-details,
ai-figcaption,
ai-figure,
ai-footer,
ai-header,
ai-hgroup,
ai-main,
ai-menu,
ai-nav,
ai-section,
ai-summary {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

ai-audio,
ai-canvas,
ai-progress,
ai-video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
  text-decoration: none;
  color: #ff4081; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong,
ai-text[bold] {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

ai-avatar {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  overflow: hidden;
  border-radius: 100%;
  width: 2em;
  height: 2em; }
  ai-avatar img {
    width: inherit;
    height: inherit;
    position: relative; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
  width: 100%; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

[block] {
  display: block !important; }

.theme-light view-content {
  background-color: #fafafa; }

.theme-light label {
  color: rgba(0, 0, 0, 0.38); }

.theme-dark view-content {
  background-color: #616161; }

.theme-dark label {
  color: rgba(255, 255, 255, 0.3); }

/*# sourceMappingURL=data:application/json;base64, */
