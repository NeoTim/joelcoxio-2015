@charset "UTF-8";
html {
  box-sizing: border-box; }

*,
*::after,
*::before {
  box-sizing: inherit; }

html {
  box-sizing: border-box; }

*,
*::after,
*::before {
  box-sizing: inherit; }

/******************************
 *
 * Aurelia Interface
 *
 * author  JoelCoxOKC  <Joel.cox.dev@gmail.com>
 *
 ******************************/
/******************************
 * sass THEME - MATREIAL
 ******************************/
/**
 *  @register:
 *
 *      _classes
 *      _functions
 *      _palette
 *      _placeholders
 */
/**
 * Retrieves a color value from the $material-colors Sass map
 * Inspired by https://github.com/nilskaspersson/Google-Material-UI-Color-Palette/
 *
 * @function
 * @param {string} color-name             - quoted, lower-case, dasherized color
 *                                          name (e.g. 'pink', 'amber')
 * @param {string} [color-variant='500']  - quoted, lowercase color variant (e.g.
 *                                          '200', 'a100')
 */
/*********************
    Typography
*********************/
/**
 * Retrieves a color value from the $material-colors Sass map
 * Inspired by https://github.com/nilskaspersson/Google-Material-UI-Color-Palette/
 *
 * @function
 * @param {string} color-name             - quoted, lower-case, dasherized color
 *                                          name (e.g. 'pink', 'amber')
 * @param {string} [color-variant='500']  - quoted, lowercase color variant (e.g.
 *                                          '200', 'a100')
 */
/**
 * load-module description]
 * @param  {[type]} $name        [description]
 * @param  {[type]} $meta:()     [description]
 * @param  {[type]} $force:false [description]
 * @param  {[type]} $insert:true [description]
 * @return {[type]}              [description]
 */
/**
 * insert-module description]
 * @param  {[type]} $name       [description]
 * @param  {[type]} $meta:false [description]
 * @return {[type]}             [description]
 */
/**
 *
 * loader-import
 * ==============
 *
 * @param  {String} $name Module name to be imported
 * @expose {Placeholer}   Expose module's placeholder on the current context
 */
/**
 *
 * loader-export
 * =============
 *
 * @param  {String} $module Module Defenition Type. {component|mixin|function|theme}
 * @param  {String} $name   Actual Module name
 * @param  {Map}    $map    Module mappings
 * @expose {Placeholder}    Expose the module placeholder.
 */
/**
 * loader-export-component
 *
 * Make sure we don't load styles more than once on each component.
 * @param  {String} $name - component name
 */
/**
 * loader-export-module
 *
 * Make sure we don't load modules more than once.
 *
 * @param  {String} $name - component name
 */
/**
 *
 * loader-is--loaded
 * =================
 *
 * @description  Has the file been loaded yet? Should it reload?
 *
 * @param  {Map}     $map [arguments map]
 * @return {Map}     return loaded map instance
 */
/**
 *
 * loader-get--loaded
 * =================
 *
 * @description  Has the file been loaded yet? Should it reload?
 *
 * @param  {Map}     $map [arguments map]
 * @return {Map}     return loaded map instance
 */
/**
 *
 * Extend mixin
 *
 * Dealing with the extension for you
 *
 * @param  {String} $placeholder  - name of the placeholder to @extend
 * @param  {Bool} $extend: (true) - @extend or @include?
 */
/*** Colors ***/
/* SHADOWS */
/* Animation Curves */
/* Buttons */
/***********
 * Font Paths
 **********/
/***********
 * Font Heading
 **********/
/***********
 * Grid
 * @columns: Set the number of columns
 * @gutter-width: Set the width of the gutters.
 *
 * @breakpoint [xs] Extra small screen / phone
 * @breakpoint [sm] Small screen / phone
 * @breakpoint [md] Medium screen / tablet
 * @breakpoint [lg] Large screen / desktop
 * @breakpoint [xl] Extra large screen / wide desktop
 **********/
/***********
 * Shadow
 ***********/
/***********
 * Theme Variable
 **********/
/**
 * heading
 * @param  {Number} $size:1 h1, h2, h3, h4, h5, h6
 * @return {EM}      return the heading fontSize
 */
/* SHADOWS */
/**
 * heading
 *
 * Applies font-size and margins
 * @param  {Number} $size:1  Heading size
 * @param  {Boolean} $margin:true  Toggle margins
 */
/**
 *     Utilities
 *   -------------
 *   TODO: Fill out breakpoints
 */
/**
 * map-fetch
 * @param  {Map} $map     Map to iterate through
 * @param  {Strings} $keys... List of strings to fetch from
 */
/**
 *     Mixins
 *   ----------
 */
/*
// At root level
.a {
  @include _(clear); // Same as @extend %clear
}

.b {
  @include _(clear);
}

// In a nested media query
.c {
  @include breakpoint(medium) {
    @include _(clear);
  }
}

// In an outer media query
@include breakpoint(medium) {
  .d {
    @include _(clear);
  }
}

// Both in a nested media query and at root level
.e {
  @include _(clear);

  @include breakpoint(large) {
    @include _(clear);
  }
}

// Have a look at the CSS output on the right.
*/
/* ----------------------------------------------------------------------
 * @Mixin(): flexbox
 * @Placeholder: %flexbox
 *
 * @description applies proper vender prefixes for older browsers when using `display:flex`;
 */
/* ----------------------------------------------------------------------
 * @Mixin(): inline-flex
 * @Placeholder: %inline-flex
 *
 * @description applies proper vender prefixes for older browsers when using `display:inline-flex`;
 */
/* ----------------------------------------------------------------------
 * @Mixin(): flex-direction
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-direction-property
 * @Helper-Mixin(): flex-dir
 * @Helper-Mixin(): flex-column
 * @Helper-Mixin(): flex-row
 * @Placeholder: %flex-column
 * @Placeholder: %flex-row
 *
 * @description The 'flex-direction' property specifies how flex items are placed in
 *              the flex container, by setting the direction of the flex container's
 *              main axis. This determines the direction that flex items are laid out in.
 *
 * @values: row | row-reverse | column | column-reverse
 * @default: row
 */
/* ----------------------------------------------------------------------
 * @Mixin(): flex-wrap
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-wrap-property
 * @description: The 'flex-wrap' property controls whether the flex container is single-line
 *               or multi-line, and the direction of the cross-axis, which determines
 *               the direction new lines are stacked in.
 * @param  {String} [$value: nowrap]
 *
 * @values: nowrap | wrap | wrap-reverse
 * @default: nowrap
 */
/* ----------------------------------------------------------------------
 * @Mixin(): flex-flow
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-flow-property
 * @description: The 'flex-flow' property is a shorthand for setting the 'flex-direction'
 *               and 'flex-wrap' properties, which together define the flex container's
 *               main and cross axes.
 * @values: <flex-direction> | <flex-wrap>
 * @default: row nowrap
 */
/* ----------------------------------------------------------------------
 * @Mixin(): order
 *
 * @resource: http://w3.org/tr/css3-flexbox/#order-property
 * @description: The 'order' property controls the order in which flex items appear within
 *               their flex container, by assigning them to ordinal groups.
 * @default: 0
 */
/* ----------------------------------------------------------------------
 * @Mixin(): flex-grow
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-grow-property
 * @description: The 'flex-grow' property sets the flex grow factor. Negative numbers
 *               are invalid.
 * @default: 0
 */
/* ----------------------------------------------------------------------
 * @Mixin(): flex-shrink
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-shrink-property
 * @description: The 'flex-shrink' property sets the flex shrink factor. Negative numbers
 *               are invalid.
 * @default: 1
 */
/* ----------------------------------------------------------------------
 * @Mixin(): flex-basis
 *
 * @resource: http://www.w3.org/TR/css3-flexbox/#flex-basis-property
 * @description: The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
 *
 * @values: Like "width"
 * @default: auto
 */
/* ----------------------------------------------------------------------
 * @Mixin(): flex
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-property
 * @description: The 'flex' property specifies the components of a flexible length: the
 *               flex grow factor and flex shrink factor, and the flex basis. When an
 *               element is a flex item, 'flex' is consulted instead of the main size
 *               property to determine the main size of the element. If an element is
 *               not a flex item, 'flex' has no effect.
 * @values: none | <flex-grow> <flex-shrink> || <flex-basis>
 * @default: See individual properties (1 1 0).
 */
/* ---------------------------------------------------------------------
 * @Mixin(): justify-content
 * @Helper-Mixin(): flex-just
 *
 * @resource: http://w3.org/tr/css3-flexbox/#justify-content-property
 * @description: The 'justify-content' property aligns flex items along the main axis
 *               of the current line of the flex container. This is done after any flexible
 *               lengths and any auto margins have been resolved. Typically it helps distribute
 *               extra free space leftover when either all the flex items on a line are
 *               inflexible, or are flexible but have reached their maximum size. It also
 *               exerts some control over the alignment of items when they overflow the line.
 *
 * @Note: 'space-*' values not supported in older syntaxes.
 * @values: flex-start | flex-end | center | space-between | space-around
 * @default: flex-start
 */
/* ---------------------------------------------------------------------
 * @Mixin(): align-items
 * @Helper-Mixin(): flex-items
 *
 * @resource: http://w3.org/tr/css3-flexbox/#align-items-property
 * @description: Flex items can be aligned in the cross axis of the current line of the
 *               flex container, similar to 'justify-content' but in the perpendicular
 *               direction. 'align-items' sets the default alignment for all of the flex
 *               container's items, including anonymous flex items. 'align-self' allows
 *               this default alignment to be overridden for individual flex items. (For
 *               anonymous flex items, 'align-self' always matches the value of 'align-items'
 *               on their associated flex container.)
 *
 * @values: flex-start | flex-end | center | baseline | stretch
 * @default: stretch
 */
/* ---------------------------------------------------------------------
 * @Mixin(): align-self
 * @Helper-Mixin(): flex-self
 *
 * @values: auto | flex-start | flex-end | center | baseline | stretch
 * @default: auto
 */
/* ---------------------------------------------------------------------
 * @Mixin(): align-content
 * @Helper-Mixin(): flex-content
 *
 * @resource: http://w3.org/tr/css3-flexbox/#align-content-property
 * @description: The 'align-content' property aligns a flex container's lines within the
 *               flex container when there is extra space in the cross-axis, similar to
 *               how 'justify-content' aligns individual items within the main-axis. Note,
 *               this property has no effect when the flexbox has only a single line.
 *
 * @values: flex-start | flex-end | center | space-between | space-around | stretch
 * @default: stretch
 */
/*
 * new-component
 *
 * @param {Map}    $args   - map of customizable property->value pairs
 * @param {String} $module - module to pull property values from
 *
 * @return {Map} updated instance map
 */
/************************************
 *     HANDSET MEDIA
 ***********************************/
/************************************
 *     TABLET MEDIA
 ***********************************/
/**
 * @mixin button-element
 * @uses Function(): button-element;
 * @param  {List} $args...   ArgumentList
 */
/**
 * @mixin list-item
 * @uses Function(): list-item;
 * @param  {List} $props...   ArgumentList
 */
/**
 * @mixin popover-element
 * @uses Function(): popover-element;
 * @param  {List} $props...   ArgumentList
 */
/**
 * @mixin popover-element
 * @uses Function(): popover-element;
 * @param  {List} $props...   ArgumentList
 */
/*!
  Android-style icons originally built by Google’s
  Material Design Icons: https://github.com/google/material-design-icons
  used under CC BY http://creativecommons.org/licenses/by/4.0/
  Modified icons to fit ionicon’s grid from original.
*/
@font-face {
  font-family: "Roboto";
  src: url("assets/font/roboto/Roboto-Thin.woff2") format("woff2"), url("assets/font/roboto/Roboto-Thin.woff") format("woff"), url("assets/font/roboto/Roboto-Thin.ttf") format("truetype");
  font-weight: 200; }

@font-face {
  font-family: "Roboto";
  src: url("assets/font/roboto/Roboto-Light.woff2") format("woff2"), url("assets/font/roboto/Roboto-Light.woff") format("woff"), url("assets/font/roboto/Roboto-Light.ttf") format("truetype");
  font-weight: 300; }

@font-face {
  font-family: "Roboto";
  src: url("assets/font/roboto/Roboto-Regular.woff2") format("woff2"), url("assets/font/roboto/Roboto-Regular.woff") format("woff"), url("assets/font/roboto/Roboto-Regular.ttf") format("truetype");
  font-weight: 400; }

@font-face {
  font-family: "Roboto";
  src: url("assets/font/roboto/Roboto-Medium.woff2") format("woff2"), url("assets/font/roboto/Roboto-Medium.woff") format("woff"), url("assets/font/roboto/Roboto-Medium.ttf") format("truetype");
  font-weight: 500; }

@font-face {
  font-family: "Roboto";
  src: url("assets/font/roboto/Roboto-Bold.woff2") format("woff2"), url("assets/font/roboto/Roboto-Bold.woff") format("woff"), url("assets/font/roboto/Roboto-Bold.ttf") format("truetype");
  font-weight: 700; }

@font-face {
  font-family: "Noto";
  src: url("assets/font/noto/NotoSerif-Regular.ttf") format("truetype"); }

@font-face {
  font-family: "Arual";
  src: url("assets/font/arual/Arual.ttf") format("truetype"); }

@font-face {
  font-family: 'MDIcons';
  font-style: normal;
  font-weight: 400;
  src: url(assets/font/mdicon/MaterialIcons-Regular.eot);
  /* For IE6-8 */
  src: local("MD Icons"), local("MDIcons-Regular"), url(assets/font/mdicon/MaterialIcons-Regular.woff2) format("woff2"), url(assets/font/mdicon/MaterialIcons-Regular.woff) format("woff"), url(assets/font/mdicon/MaterialIcons-Regular.ttf) format("truetype"); }

@font-face {
  font-family: "aIcons";
  src: url("assets/font/aicon/aicons.eot?v=2.0.0");
  src: url("assets/font/aicon/aicons.eot?v=2.0.0#iefix") format("embedded-opentype"), url("assets/font/aicon/aicons.ttf?v=2.0.0") format("truetype"), url("assets/font/aicon/aicons.woff?v=2.0.0") format("woff"), url("assets/font/aicon/aicons.svg?v=2.0.0#Ionicons") format("svg");
  font-weight: normal;
  font-style: normal; }

/**
 * http://applemusic.tumblr.com/
 */
/** Ultra Light */
@font-face {
  font-family: "San Francisco";
  font-weight: 100;
  src: url("https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-ultralight-webfont.woff2") format("woff2"); }

/** Thin */
@font-face {
  font-family: "San Francisco";
  font-weight: 200;
  src: url("https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-thin-webfont.woff2") format("woff2"); }

/** Medium */
@font-face {
  font-family: "San Francisco";
  font-weight: normal;
  src: url("https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-medium-webfont.woff2") format("woff2"); }

/** Semi Bold */
@font-face {
  font-family: "San Francisco";
  font-weight: 500;
  src: url("https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-semibold-webfont.woff2") format("woff2"); }

/** Bold */
@font-face {
  font-family: "San Francisco";
  font-weight: bold;
  src: url("https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-bold-webfont.woff2") format("woff2"); }

form textarea::-webkit-validation-bubble-message,
form input::-webkit-validation-bubble-message,
form select::-webkit-validation-bubble-message,
form textarea::-webkit-validation-bubble-message {
  display: none; }

.ai-overlay-element.modal-overlay {
  z-index: 4000;
  min-width: 100vw;
  min-height: 100vh;
  display: block;
  position: fixed;
  outline: none;
  top: 0;
  left: 0;
  -webkit-transform-origin: bottom;
      -ms-transform-origin: bottom;
          transform-origin: bottom;
  opacity: 0;
  -webkit-transform: scaleY(0);
  -ms-transform: scaleY(0);
  transform: scaleY(0);
  -webkit-transition-duration: 0.2s;
          transition-duration: 0.2s;
  -webkit-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  background-color: rgba(0, 0, 0, 0.5); }
  .ai-overlay-element.modal-overlay.is-active {
    -webkit-transform: scaleY(1);
    -ms-transform: scaleY(1);
    transform: scaleY(1);
    opacity: 1; }

.ai-overlay-element.popover-overlay {
  z-index: 4000;
  min-width: 100vw;
  min-height: 100vh;
  display: block;
  position: fixed;
  outline: none;
  top: 0;
  left: 0;
  -webkit-transform-origin: center;
      -ms-transform-origin: center;
          transform-origin: center;
  opacity: 0;
  -webkit-transform: scale(0);
  -ms-transform: scale(0);
  transform: scale(0);
  -webkit-transition-duration: 0.2s;
          transition-duration: 0.2s;
  -webkit-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  background-color: rgba(0, 0, 0, 0.5); }
  .browser-safari .ai-overlay-element.popover-overlay {
    background-color: transparent !important;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    -webkit-backdrop-filter: blur(1rem);
    backdrop-filter: blur(1rem); }
  .ai-overlay-element.popover-overlay.is-closing {
    opacity: 0; }
  .ai-overlay-element.popover-overlay.is-active {
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
    opacity: 1; }

@-webkit-keyframes fadeIn {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }

@keyframes fadeIn {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }

ai-view {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  min-width: 100%;
  max-width: 100%;
  min-height: 100%;
  max-height: 100%;
  overflow: hidden;
  -webkit-box-direction: normal;
  -webkit-box-orient: vertical;
  -webkit-flex-direction: column;
  -moz-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-transition-duration: 500ms;
          transition-duration: 500ms;
  -webkit-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

[view-ref] {
  cursor: pointer; }

@-webkit-keyframes fadeIn {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }

@keyframes fadeIn {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }

@-webkit-keyframes fadeOut {
  0% {
    opacity: 1; }
  100% {
    opacity: 0; } }

@keyframes fadeOut {
  0% {
    opacity: 1; }
  100% {
    opacity: 0; } }

@-webkit-keyframes slideInRight {
  0% {
    -webkit-transform: translateX(0);
    -ms-transform: translateX(0);
    transform: translateX(0); }
  100% {
    -webkit-transform: translateX(-100vw);
    -ms-transform: translateX(-100vw);
    transform: translateX(-100vw); } }

@keyframes slideInRight {
  0% {
    -webkit-transform: translateX(0);
    -ms-transform: translateX(0);
    transform: translateX(0); }
  100% {
    -webkit-transform: translateX(-100vw);
    -ms-transform: translateX(-100vw);
    transform: translateX(-100vw); } }

@-webkit-keyframes slideOutRight {
  0% {
    -webkit-transform: translateX(-100vw);
    -ms-transform: translateX(-100vw);
    transform: translateX(-100vw); }
  100% {
    -webkit-transform: translateX(0);
    -ms-transform: translateX(0);
    transform: translateX(0);
    opacity: 0; } }

@keyframes slideOutRight {
  0% {
    -webkit-transform: translateX(-100vw);
    -ms-transform: translateX(-100vw);
    transform: translateX(-100vw); }
  100% {
    -webkit-transform: translateX(0);
    -ms-transform: translateX(0);
    transform: translateX(0);
    opacity: 0; } }

ai-view {
  background-color: white; }

view-content {
  z-index: 10;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
  height: 100%;
  min-height: 100vh;
  top: 0;
  overflow-x: hidden;
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
  -webkit-user-select: none;
  -moz-user-select: none;
  -webkit-box-direction: normal;
  -webkit-box-orient: vertical;
  -webkit-flex-direction: column;
  -moz-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  background-color: #fafafa; }
  [gutter] > view-content {
    padding-left: 16px;
    padding-right: 16px; }

@media (min-width: 0) {
  [gutter-xs] > view-content {
    padding-left: 16px;
    padding-right: 16px; } }

@media (min-width: 48em) {
  [gutter-md] > view-content {
    padding-left: 24px;
    padding-right: 24px; } }

.theme-light view-content {
  background-color: #fafafa; }

.theme-dark view-content {
  background-color: #616161; }

.tabbar-placeholder {
  max-height: 3rem;
  min-height: 3rem;
  min-width: 100vw;
  max-width: 100vw;
  bottom: 0;
  left: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: fixed;
  -webkit-box-flex: 1;
  -webkit-flex: 1;
  -moz-flex: 1;
  -ms-flex: 1;
  flex: 1;
  min-height: 3rem;
  max-height: 3rem;
  visibility: collapse;
  position: relative;
  -webkit-box-ordinal-group: 4;
  -webkit-order: 3;
  -moz-order: 3;
  -ms-flex-order: 3;
  order: 3; }
  .tabbar-placeholder ai-tab {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-align: center;
    -ms-flex-align: center;
    -webkit-align-items: center;
    -moz-align-items: center;
    align-items: center;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    -webkit-justify-content: center;
    -moz-justify-content: center;
    justify-content: center;
    -webkit-box-flex: 1;
    -webkit-flex: 1;
    -moz-flex: 1;
    -ms-flex: 1;
    flex: 1; }
    .tabbar-placeholder ai-tab .ai-icon {
      height: auto;
      -webkit-box-align: start;
      -ms-flex-align: start;
      -webkit-align-items: flex-start;
      -moz-align-items: flex-start;
      align-items: flex-start;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      -webkit-justify-content: center;
      -moz-justify-content: center;
      justify-content: center; }

ai-tabbar {
  max-height: 3rem;
  min-height: 3rem;
  min-width: 100vw;
  max-width: 100vw;
  bottom: 0;
  left: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: fixed;
  -webkit-box-flex: 1;
  -webkit-flex: 1;
  -moz-flex: 1;
  -ms-flex: 1;
  flex: 1;
  z-index: 10;
  background-color: rgba(255, 255, 255, 0.5);
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  -webkit-backdrop-filter: blur(3rem);
  backdrop-filter: blur(3rem); }
  ai-tabbar:before {
    content: " ";
    position: absolute;
    top: 0;
    left: 0;
    max-height: 1px;
    min-height: 1px;
    min-width: 100%;
    background-color: black; }
  ai-tabbar ai-tab {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-align: center;
    -ms-flex-align: center;
    -webkit-align-items: center;
    -moz-align-items: center;
    align-items: center;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    -webkit-justify-content: center;
    -moz-justify-content: center;
    justify-content: center;
    -webkit-box-flex: 1;
    -webkit-flex: 1;
    -moz-flex: 1;
    -ms-flex: 1;
    flex: 1; }
    ai-tabbar ai-tab .ai-icon {
      height: auto;
      -webkit-box-align: start;
      -ms-flex-align: start;
      -webkit-align-items: flex-start;
      -moz-align-items: flex-start;
      align-items: flex-start;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      -webkit-justify-content: center;
      -moz-justify-content: center;
      justify-content: center; }

router-view {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  min-width: 100vw;
  max-width: 100vw;
  min-height: 100%;
  max-height: 100%;
  width: 100vw;
  height: 100%;
  -webkit-box-direction: normal;
  -webkit-box-orient: horizontal;
  -webkit-flex-direction: row;
  -moz-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: none;
  flex-wrap: nowrap; }
  router-view.blur-view {
    -webkit-filter: blur(20px);
    filter: blur(20px); }

router-view-container {
  display: block;
  position: absolute;
  width: 100%;
  height: 100%;
  left: 110vw;
  background-color: white;
  z-index: 2;
  /*-webkit-transform: translate3d(-110vw, 0, 0);
          transform: translate3d(-110vw, 0, 0);
*/
  -webkit-animation-name: slideInRight;
  animation-name: slideInRight;
  -webkit-animation-fill-mode: forwards;
  animation-fill-mode: forwards;
  -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  -webkit-animation-duration: 0.2s;
  animation-duration: 0.2s;
  -webkit-animation-direction: normal;
  animation-direction: normal; }
  router-view-container:first-child {
    z-index: 1; }

@-webkit-keyframes slideInRight {
  0% {
    opacity: 0;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0); }
  100% {
    opacity: 1;
    -webkit-transform: translate3d(-110vw, 0, 0);
    transform: translate3d(-110vw, 0, 0); } }

@keyframes slideInRight {
  0% {
    opacity: 0;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0); }
  100% {
    opacity: 1;
    -webkit-transform: translate3d(-110vw, 0, 0);
    transform: translate3d(-110vw, 0, 0); } }

@-webkit-keyframes slideOutRight {
  0% {
    opacity: 1;
    -webkit-transform: translate3d(-110vw, 0, 0);
    transform: translate3d(-110vw, 0, 0); }
  100% {
    opacity: 0;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0); } }

@keyframes slideOutRight {
  0% {
    opacity: 1;
    -webkit-transform: translate3d(-110vw, 0, 0);
    transform: translate3d(-110vw, 0, 0); }
  100% {
    opacity: 0;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0); } }

@-webkit-keyframes pushLeft {
  from {
    -webkit-transform: translate3d(-115vw, 0, 0); }
  to {
    -webkit-transform: translate3d(-135vw, 0, 0); } }

@keyframes pushLeft {
  from {
    -webkit-transform: translate3d(-115vw, 0, 0);
            transform: translate3d(-115vw, 0, 0); }
  to {
    -webkit-transform: translate3d(-135vw, 0, 0);
            transform: translate3d(-135vw, 0, 0); } }

@-webkit-keyframes pushRight {
  from {
    -webkit-transform: translate3d(-135vw, 0, 0); }
  to {
    -webkit-transform: translate3d(-115vw, 0, 0); } }

@keyframes pushRight {
  from {
    -webkit-transform: translate3d(-135vw, 0, 0);
            transform: translate3d(-135vw, 0, 0); }
  to {
    -webkit-transform: translate3d(-115vw, 0, 0);
            transform: translate3d(-115vw, 0, 0); } }

/*# sourceMappingURL=data:application/json;base64, */
