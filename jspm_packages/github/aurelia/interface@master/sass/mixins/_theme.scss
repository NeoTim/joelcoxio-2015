@function color($color, $mval:null) {
  @if $mval != null {
    @return material-color($color, $mval);
  }
  @return map-get($theme-module, $color);
}

@mixin bg-color($props...) {
  background-color: color($props...);
}

@mixin text-color($props...) {
  color: color($props...);
}

@mixin theme-dark($parent:false) {
  @if $parent == true {
    [ui-theme--dark] &,
    .ui-theme--dark & {
      @content;
    }
  }
  @else {
    [ui-theme--dark],
    .ui-theme--dark {
      @content;
    }
  }
}

@mixin theme-light($parent:false) {
  @if $parent == true {
    [ui-theme--light] &,
    .ui-theme--light & {
      @content;
    }
  }
  @else {
    [ui-theme--light],
    .ui-theme--light {
      @content;
    }
  }
}

@mixin at-theme-dark {
  @include theme-dark(true) {
    @content;
  }
}
@mixin at-theme-light {
  @include theme-light(true) {
    @content;
  }
}



@mixin blur-effect($blur:10px,$bg:rgba(255,255,255,0.8), $height:120%, $width:120%, $z:-1) {
  background-color: $bg;
  overflow: hidden;
  &:before {
    @include filter(blur($blur));
    filter:url(#blur-effect);
    content: " ";
    min-width: $width;
    min-height: $height;
    position: absolute;
    top: 0;
    background: inherit;
    z-index: $z;
    opacity: 0.6;
    box-shadow: inset $blur $blur $blur $bg;
  }

  &:after {
    @include filter(blur($blur));
    content: " ";
    min-width: $width;
    min-height: $height;
    position: absolute;
    top: ($blur * -1);
    left: -20%;
    background: inherit;
    z-index: $z;
    opacity: 0.6;
    box-shadow: inset $blur $blur $blur $bg;
  }
}
