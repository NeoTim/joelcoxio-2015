
////////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                      ///
///                                          Flexbox Containers                                          ///
/// **************************************************************************************************** ///
///                                                                                                      ///
///                                                                                                      ///
/// @resouce http://w3.org/tr/css3-flexbox/#flex-containers                                              ///
/// @NOTE:  - The 'flex' value causes an element to generate a block-level flex container box.           ///
///         - The 'inline-flex' value causes an element to generate a inline-level flex container box.   ///
///         - display: flex | inline-flex                                                                ///
///                                                                                                      ///
/// @USE    - (Placeholder selectors for each type, for those who rather @extend)                        ///
///                                                                                                      ///
////////////////////////////////////////////////////////////////////////////////////////////////////////////


/* ----------------------------------------------------------------------
 * @Mixin(): flexbox
 * @Placeholder: %flexbox
 *
 * @description applies proper vender prefixes for older browsers when using `display:flex`;
 */
@mixin flexbox {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
}

%flexbox { @include flexbox; }


/* ----------------------------------------------------------------------
 * @Mixin(): inline-flex
 * @Placeholder: %inline-flex
 *
 * @description applies proper vender prefixes for older browsers when using `display:inline-flex`;
 */
@mixin inline-flex {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

%inline-flex { @include inline-flex; }


/* ----------------------------------------------------------------------
 * @Mixin(): flex-direction
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-direction-property
 * @Helper-Mixin(): flex-dir
 * @Helper-Mixin(): flex-column
 * @Helper-Mixin(): flex-row
 * @Placeholder: %flex-column
 * @Placeholder: %flex-row
 *
 * @description The 'flex-direction' property specifies how flex items are placed in
 *              the flex container, by setting the direction of the flex container's
 *              main axis. This determines the direction that flex items are laid out in.
 *
 * @values: row | row-reverse | column | column-reverse
 * @default: row
 */
@mixin flex-direction($value: row) {
    @if $value == row-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
    } @else if $value == column {
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
    } @else if $value == column-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
    } @else {
        -webkit-box-direction: normal;
        -webkit-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -moz-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
}
@mixin flex-dir($args...) { @include flex-direction($args...); }

// NOTE: DO NOT inside an @media block
%flex-column {
  @include flex-direction(column);
}

// NOTE: DO NOT inside an @media block
%flex-row {
  @include flex-direction(row);
}

// NOTE: DO NOT inside an @media block
@mixin flex-column {
  @extend %flex-column;
}

// NOTE: DO NOT inside an @media block
@mixin flex-row {
  @extend %flex-row;
}


/* ----------------------------------------------------------------------
 * @Mixin(): flex-wrap
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-wrap-property
 * @description: The 'flex-wrap' property controls whether the flex container is single-line
 *               or multi-line, and the direction of the cross-axis, which determines
 *               the direction new lines are stacked in.
 * @param  {String} [$value: nowrap]
 *
 * @values: nowrap | wrap | wrap-reverse
 * @default: nowrap
 */
@mixin flex-wrap($value: nowrap) {
    // No Webkit Box fallback.
    -webkit-flex-wrap: $value;
    -moz-flex-wrap: $value;
    @if $value == nowrap {
        -ms-flex-wrap: none;
    } @else {
        -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
}

/* ----------------------------------------------------------------------
 * @Mixin(): flex-flow
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-flow-property
 * @description: The 'flex-flow' property is a shorthand for setting the 'flex-direction'
 *               and 'flex-wrap' properties, which together define the flex container's
 *               main and cross axes.
 * @values: <flex-direction> | <flex-wrap>
 * @default: row nowrap
 */
@mixin flex-flow($values: (row nowrap)) {
    // No Webkit Box fallback.
    -webkit-flex-flow: $values;
    -moz-flex-flow: $values;
    -ms-flex-flow: $values;
    flex-flow: $values;
}

/* ----------------------------------------------------------------------
 * @Mixin(): order
 *
 * @resource: http://w3.org/tr/css3-flexbox/#order-property
 * @description: The 'order' property controls the order in which flex items appear within
 *               their flex container, by assigning them to ordinal groups.
 * @default: 0
 */
@mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
    -webkit-order: $int;
    -moz-order: $int;
    -ms-flex-order: $int;
    order: $int;
}

/* ----------------------------------------------------------------------
 * @Mixin(): flex-grow
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-grow-property
 * @description: The 'flex-grow' property sets the flex grow factor. Negative numbers
 *               are invalid.
 * @default: 0
 */
@mixin flex-grow($int: 0) {
    -webkit-box-flex: $int;
    -webkit-flex-grow: $int;
    -moz-flex-grow: $int;
    -ms-flex-positive: $int;
    flex-grow: $int;
}


/* ----------------------------------------------------------------------
 * @Mixin(): flex-shrink
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-shrink-property
 * @description: The 'flex-shrink' property sets the flex shrink factor. Negative numbers
 *               are invalid.
 * @default: 1
 */
@mixin flex-shrink($int: 1) {
    -webkit-flex-shrink: $int;
    -moz-flex-shrink: $int;
    -ms-flex-negative: $int;
    flex-shrink: $int;
}


/* ----------------------------------------------------------------------
 * @Mixin(): flex-basis
 *
 * @resource: http://www.w3.org/TR/css3-flexbox/#flex-basis-property
 * @description: The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
 *
 * @values: Like "width"
 * @default: auto
 */
@mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    -moz-flex-basis: $value;
    -ms-flex-preferred-size: $value;
    flex-basis: $value;
}


/* ----------------------------------------------------------------------
 * @Mixin(): flex
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-property
 * @description: The 'flex' property specifies the components of a flexible length: the
 *               flex grow factor and flex shrink factor, and the flex basis. When an
 *               element is a flex item, 'flex' is consulted instead of the main size
 *               property to determine the main size of the element. If an element is
 *               not a flex item, 'flex' has no effect.
 * @values: none | <flex-grow> <flex-shrink> || <flex-basis>
 * @default: See individual properties (1 1 0).
 */
@mixin flex($fg: 1, $fs: null, $fb: null) {

    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;

    // Box-Flex only supports a flex-grow value so let's grab the
    // first item in the list and just return that.
    @if type-of($fg) == 'list' {
        $fg-boxflex: nth($fg, 1);
    }

    -webkit-box-flex: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -moz-box-flex: $fg-boxflex;
    -moz-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
}


/* ---------------------------------------------------------------------
 * @Mixin(): justify-content
 * @Helper-Mixin(): flex-just
 *
 * @resource: http://w3.org/tr/css3-flexbox/#justify-content-property
 * @description: The 'justify-content' property aligns flex items along the main axis
 *               of the current line of the flex container. This is done after any flexible
 *               lengths and any auto margins have been resolved. Typically it helps distribute
 *               extra free space leftover when either all the flex items on a line are
 *               inflexible, or are flexible but have reached their maximum size. It also
 *               exerts some control over the alignment of items when they overflow the line.
 *
 * @Note: 'space-*' values not supported in older syntaxes.
 * @values: flex-start | flex-end | center | space-between | space-around
 * @default: flex-start
 */
@mixin justify-content($value: flex-start) {
    @if $value == flex-start {
        -webkit-box-pack: start;
        -ms-flex-pack: start;
    } @else if $value == flex-end {
        -webkit-box-pack: end;
        -ms-flex-pack: end;
    } @else if $value == space-between {
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
    } @else if $value == space-around {
        -ms-flex-pack: distribute;
    } @else {
        -webkit-box-pack: $value;
        -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    -moz-justify-content: $value;
    justify-content: $value;
}
@mixin flex-just($args...) { @include justify-content($args...); }


/* ---------------------------------------------------------------------
 * @Mixin(): align-items
 * @Helper-Mixin(): flex-items
 *
 * @resource: http://w3.org/tr/css3-flexbox/#align-items-property
 * @description: Flex items can be aligned in the cross axis of the current line of the
 *               flex container, similar to 'justify-content' but in the perpendicular
 *               direction. 'align-items' sets the default alignment for all of the flex
 *               container's items, including anonymous flex items. 'align-self' allows
 *               this default alignment to be overridden for individual flex items. (For
 *               anonymous flex items, 'align-self' always matches the value of 'align-items'
 *               on their associated flex container.)
 *
 * @values: flex-start | flex-end | center | baseline | stretch
 * @default: stretch
 */
@mixin align-items($value: stretch) {
    @if $value == flex-start {
        -webkit-box-align: start;
        -ms-flex-align: start;
    } @else if $value == flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
    } @else {
        -webkit-box-align: $value;
        -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    -moz-align-items: $value;
    align-items: $value;
}
@mixin flex-items($args...) { @include align-items($args...); }


/* ---------------------------------------------------------------------
 * @Mixin(): align-self
 * @Helper-Mixin(): flex-self
 *
 * @values: auto | flex-start | flex-end | center | baseline | stretch
 * @default: auto
 */
@mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;
    -moz-align-self: $value;
    @if $value == flex-start {
        -ms-flex-item-align: start;
    } @else if $value == flex-end {
        -ms-flex-item-align: end;
    } @else {
        -ms-flex-item-align: $value;
    }
    align-self: $value;
}
@mixin flex-self($args...) { @include align-self($args...); }


/* ---------------------------------------------------------------------
 * @Mixin(): align-content
 * @Helper-Mixin(): flex-content
 *
 * @resource: http://w3.org/tr/css3-flexbox/#align-content-property
 * @description: The 'align-content' property aligns a flex container's lines within the
 *               flex container when there is extra space in the cross-axis, similar to
 *               how 'justify-content' aligns individual items within the main-axis. Note,
 *               this property has no effect when the flexbox has only a single line.
 *
 * @values: flex-start | flex-end | center | space-between | space-around | stretch
 * @default: stretch
 */
@mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;
    -moz-align-content: $value;
    @if $value == flex-start {
        -ms-flex-line-pack: start;
    } @else if $value == flex-end {
        -ms-flex-line-pack: end;
    } @else {
        -ms-flex-line-pack: $value;
    }
    align-content: $value;
}
@mixin flex-content($args...) { @include align-content($args...); }


@mixin flexible($display:null, $direction:null, $flex:null, $items:null, $justify:null, $self:null) {
  @if $display == true {
    display: flex;
  }

  @else if $display == inline {
    display: inline-flex;
  }

  @if $direction != null {
    @include flex-direction($direction);
  }

  @if $flex != null {
    @include flex($flex);
  }

  @if $items != null {
    @include align-items($items);
  }

  @if $justify != null {
    @include justify-content($justify);
  }

  @if $self != null {
    @include align-self($self);
  }
}
